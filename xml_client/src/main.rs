#[allow(unused_imports)]
use game_sdk::actionlist::{ActionList, ActionListStack};
use game_sdk::gamestate::GameState;
#[allow(unused_imports)]
use rand::{rngs::SmallRng, RngCore, SeedableRng};
use std::time::Instant;

fn perft(state: &mut GameState, depth: usize, als: &mut ActionListStack) -> u64 {
    if depth == 0 {
        return 1;
    }
    als[depth].size = 0;
    state.get_possible_actions(&mut als[depth]);
    let mut nodes: u64 = 0;
    for i in 0..als[depth].size {
        state.do_action(als[depth][i]);
        nodes += perft(state, depth - 1, als);
        state.undo_action(als[depth][i]);
    }
    nodes
}

fn test() {
    let current_best: f64 = 18049.26148950369;
    let depth = 3;
    let start_time = Instant::now();
    let mut als = ActionListStack::with_size(depth + 1);
    let mut nodes: u64 = 0;
    let fens = vec![
        "10 229376 21270254224581560681009129656623824896 0 0 17179881472 1993842152134227742961992379458912256 0 0 0 0 0 162259412228914383610878529372163 0 0 0 2658457893046336551349755980500697088 230904757757165799616708592",
        "10 0 0 0 19342933017710128346955783 0 0 0 39614137926592813397409923072 98304 15950746090631045859057348985858555904 0 0 26843557376 1661535628556444955244459573702033408 0 0 154440272870296387877599664",
        "20 30198995168 293365279443816735062136112594026496 0 0 0 0 12582916 85079313173985257918964474942932910087 1015808 170141305154946196466352900360548909057 63803440716793458321041920384993067008 0 0 0 144115256795430912 23926121354332172426798567770540212224 151073170450704144856308208",
        "20 32768 260528811403642228024968646818852765697 85070824977945057860053527251331842048 0 25769809920 893075346870093633551151644496888320 0 0 0 0 54043255658020864 5316930047161774554750982355981959168 0 0 4611719003776745472 85090103408756899220541221243145158659 307744803315851672628821744",
        "30 229376 21267952169810085108184917592085889091 57115297320849445689058815622774784 0 0 0 38685690791276789624733710 170141467418691221179086778129591566823 18723382112 2056149912506664726154139460842831872 1329229104979266630684432066332852224 0 0 0 77309513728 3442502072048657342325913461828878336 304943151934853736534145520",
        "30 32768 37218394023184864186803413189188255744 212676601020082847726591648717750665216 0 25803370512 1877015861529991028763807034036453728 10384598514087307487909557892546560 0 0 0 113337209920247656648192 26916882245300972596716180066311864320 0 0 1180592605879913676824 7788446216264695725494365063217643 51077076909047998924704096",
        "40 17699977472 290769119254350934343014587205480506 5516815412193254355313652349796352 0 0 0 20769225191311394162072247309172792 255217819350545276391125758058979918029 0 0 39614140286733189400615717888 533508569682242645177830564241899520 491521 260566823191582899584087460310882451456 170141386284676489536782398722964193280 0 75164458884658575984171489",
        "40 58818576 95707949909970636803263853446849101953 10871376557348266849684416683311104 0 0 0 1057810290321235671984128 14289207629663625888891807733203739136 18253620224 2243073129252141998119398892768379504 8743828494080390770443191397600198656 0 0 0 4543262536584243175438282947297424 75531974608504484178826630365446151 215702683229116160700288240",
        "50 0 36893514535702364162 4543425635298050966376384865335808 13354598295189234389641130179868557312 0 524288 127605928160350052204113858793917382663 122252710658945086768662288842779 732398029 276487541161327099597881195484151808008 170141426849461846804187727350080733184 0 19327362048 1578458977855426144167029985264027712 3291918119692019614806664636744597968 9086520740375987635308643475259392 181398368566248924710594816",
        "50 0 52224 1910767462329971430403116211877501952 1329240474227869317566627749773139968 26239572064 768946940984207925637570756968710720 62956661616248174825774958654783520 5192296858534827628530496329220096 0 131072 63802974221309710203868794333900571393 85112576336006278475792847426170130183 98311 69121934727998263579280422593398309263 85088845903868348207934634634550181916 0 70373399473790280241797187",
        "60 18645001 196727076945029367123296100215576068108 3164058141938965557942689171774465 170806284236192177308229381980055142400 28554835808 687980082710061550736777052367637936 2679226446655175747605060225503100928 0 0 8589946880 7186142239217612856890803936945135616 22887661705323804682195172538012418176 0 2417853368611790137720832 127605938301438797331121811190334882632 20769199484720596519505144559173655 63051880998659764330744066",
        "60 0 27021623534043136 7975370589240182537328862426835202832 19526933421720860420126182114343982848 12943362 58486227033485521458286085803560402994 85078106398027448624503172505067847680 255211856320361605017326485429626601472 0 0 2286987423777804 333118393824045791315228644652114061 19260259352 131105632161144752924433880961911553 170556812816455963277143735237114593280 0 130585269340840275571918113",
        "70 64716809 212677564436673992004410150807327080848 297789116609781554114788062231554687000 0 17649644576 1858842540275108934742590682344486400 934613781160410280079013388975366144 1329229897260816215247909305335152640 0 0 68719509504 16698439914542084005925923159052053888 0 270799531167840631210901568 10425164435837153481007315425427747 85090184548163438129836111581270769699 198736170730920302101154048",
        "70 0 55340249813327806465 255213113831633284943186092101196586144 670374337194076214088011976265435089 26843559616 519230691061200786302021676344284672 747691143770318876295578859323162624 5316913884615563833959330486176186368 0 1649267834880 47852220524778689754591739787705123333 267490305301280505759403917643526969344 50561036 233947296389164730259718923174008586520 16225957702981677474510624834723840 0 67874077712235610729614656",
        "80 0 3 255211937450657676169157705608950448584 255218103425269031584331308903037927431 0 9444740847040785824256 249233004865831934155322166480144896 12440749299346903961273434995656690688 26709332032 87074882009655417791001132866324709708 4054210925221775168554506109650497540 3894223262875272434760520636039168 70746166 212680140301320308184073591132774465536 63802964080090401256637464366620344320 0 210602787750904332024891648",
        "80 281051267 47873816279879727934905378133246214412 42688499053495802470044154283077664768 0 19327367768 1636871918278182296261328909405013184 7985755133438944923086960008737325056 0 0 0 2159996523117038978402061632470709424 32806880733382656845244412976637641840 0 2 170142238146213507284010372155608924173 85073634101211170665995389786231144459 188823238166120201643155456",
        "90 0 332307157402799559838757780063258624 1163074575540143630146690577277727168 12544602560172270744903297284021554176 31591507144 959277817635490778353278218101859584 2720764841331219880997193044172213248 664614314805259109452878515076595712 4816902 186092195758137360479749653555969261806 212689754163914905427771284921633472512 0 0 0 18414358979037811858253283893 30220805725665567864229470643683339 60624665387836757684797440",
        "90 23622595680 43392308888288235077414058375736459840 83076967614273331247249288215921152 166153618315386589834480486447087616 0 8 4553401609756142987113418987881489 193864057672884399437580227147345166357 0 72057697117155328 8972293091413841810008140936781017088 13292296912679261328342091681019790848 127959043 292434725151395961891687332207134376085 233980899268536153833747051526030885056 10384593717069655257060992658440192 193901683352538829105940480"
    ];

    for fen in fens.iter() {
        let mut state = GameState::from_fen((*fen).to_string());
        nodes += perft(&mut state, depth, &mut als);
    }

    let time_elapsed = start_time.elapsed().as_micros();
    let nps = 1000. * nodes as f64 / time_elapsed as f64;
    println!(
        "{}%, Nodes: {}, nps: {}",
        nps / current_best * 100.,
        nodes,
        nps
    );
}

fn main() {
    loop {
        test();
    }
    /*
    let mut rng = SmallRng::from_entropy();
    for d in 1..10 {
        for _ in 0..2 {
            let mut al = ActionList::default();
            let mut state = GameState::new();
            for _ in 0..d * 10 {
                al.size = 0;
                state.get_possible_actions(&mut al);
                let rand = rng.next_u64() as usize % al.size;
                state.do_action(al[rand]);
                //println!("{}", state);
            }
            let res = state.game_result();
            //println!("{}", res);
            println!("\"{}\",", state.to_fen());
        }
    }*/
}
