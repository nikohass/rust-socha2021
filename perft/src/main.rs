use game_sdk::{ActionList, ActionListStack, GameState};
use rand::{rngs::SmallRng, RngCore, SeedableRng};
use std::time::Instant;

fn perft(state: &mut GameState, depth: usize, action_list_stack: &mut ActionListStack) -> u64 {
    if depth == 0 || state.is_game_over() {
        return 1;
    }
    state.get_possible_actions(&mut action_list_stack[depth]);
    let mut nodes: u64 = 0;
    for i in 0..action_list_stack[depth].size {
        state.do_action(action_list_stack[depth][i]);
        nodes += perft(state, depth - 1, action_list_stack);
        state.undo_action(action_list_stack[depth][i]);
    }
    nodes
}

fn random_perft() {
    let start_time = Instant::now();
    let mut rng = SmallRng::from_entropy();

    for _ in 0..10_000 {
        let mut state = GameState::new();
        while !state.is_game_over() {
            let random_action = state.get_random_possible_action(&mut rng, state.ply < 12, 10);
            state.do_action(random_action);
        }
    }
    let time_elapsed = start_time.elapsed().as_micros();
    println!(
        "Random action generation: {}ms",
        time_elapsed as f64 / 1000.
    );

    let start_time = Instant::now();
    for _ in 0..10_000 {
        let mut action_list = ActionList::default();
        let mut state = GameState::new();
        while !state.is_game_over() {
            state.get_possible_actions(&mut action_list);
            state.do_action(action_list[rng.next_u64() as usize % action_list.size]);
        }
    }
    let time_elapsed = start_time.elapsed().as_micros();
    println!(
        "Complete action genteration: {}ms",
        time_elapsed as f64 / 1000.
    );
}

fn test() {
    let current_best: f64 = 26_734_010.;
    let depth = 3;
    let start_time = Instant::now();
    let mut action_list_stack = ActionListStack::with_size(depth + 1);
    let mut nodes: u64 = 0;
    let fens = vec![
        "8 25769807872 996921150343251776065009382701662208 0 0 0 0 0 2287396291528267661315 0 0 0 950739007981840676599504568320 98304 10633839178386343325247702478008352768 0 0 25961484447265452962400921471401968",
        "30 25769807872 996921150343254045022605263184592960 36346084818414599765537557453996062 0 0 0 649047475072245635402777447366721 31721753070385684709394273345208323 0 0 1453845140708519202399872246643459328 19190730219111893411153728625845993472 98436 10713670744443226362423265803308892214 0 0 25961484348662411652754519073628144",
        "10 32212258816 498460617261625002680807800407327744 0 0 0 0 37779057963781087920128 5316919589048100566575940396521095168 32768 5316919589044473787964173904878239744 42535316147526911584592249876222312448 0 0 0 1 170141426849423161187183435651397713921 24663410308945225816314412397354992",
        "17 32212258816 498460617261625002680807800407328000 124615253350608212906188473242746880 0 0 0 47223797684926261854208 5316919589048100566575940396521095168 32768 5316919589044473787964173904878239772 42539534889014613328747941906419286016 0 0 0 649038035772768361448997673500673 170141426849423161187183435651397713921 24663410289300180527000730730356720",
        "25 32212258944 571152783184632903763276948209403136 124617154827037460296372118561488896 0 0 0 47223797684927201378408 5321462849418288560393594718258724864 32768 5316919589058980911634609709481459932 42560304076448752639262063891736166400 0 0 26388283260963 5841342321947831702261143397466113 170141426849423161187183435651397713921 24663410134552943990435559312777200",
        "29 32212258944 571152783184632903763276948209403136 124617154828246386692447981075955712 0 0 0 47223797684927201378408 5321462849418288781754576379339866112 32768 5316919589368466437964859210817863900 42560304076448752639262063891736166400 0 0 26388283260963 5841342331619245176708303948349441 170141426849423161187183435651397713921 24663410133948462633879772968312816",
        "4 32212258816 0 0 0 0 0 0 4835705584303175180484608 32768 5316919589044473786811251850515316736 0 0 0 0 0 9223376434907578369 24663410310154151708022919493844976",
        "10 32212258816 498460617261625002680807800407327744 0 0 0 0 37779057963781087920128 5316919589048100566575940396521095168 32768 5316919589044473787964173904878239744 42535316147526911584592249876222312448 0 0 0 1 170141426849423161187183435651397713921 24663410308945225816314412397354992",
        "20 32212258816 498460617261625002680807800407328000 124615253350608212906188473242746880 0 0 0 47223797684927201378400 5316919589048100566575940396521095168 32768 5316919589044473787964173905079566556 42560304076448752639262063891736166400 0 0 26388283260931 649038035772768361448997673500673 170141426849423161187183435651397713921 24663410134557666392956022074236912",
        "25 32212258944 571152783184632903763276948209403136 124617154827037460296372118561488896 0 0 0 47223797684927201378408 5321462849418288560393594718258724864 32768 5316919589058980911634609709481459932 42560304076448752639262063891736166400 0 0 26388283260963 5841342321947831702261143397466113 170141426849423161187183435651397713921 24663410134552943990435559312777200",
    ];

    for fen in fens.iter() {
        let mut state = GameState::from_fen((*fen).to_string());
        nodes += perft(&mut state, depth, &mut action_list_stack);
    }

    let time_elapsed = start_time.elapsed().as_micros();
    let nps = (nodes * 1_000_000) as f64 / time_elapsed as f64;
    println!(
        "{:.2}%, Nodes: {}, Nodes/s: {}",
        nps / current_best * 100.,
        nodes,
        nps as u64
    );
}

fn main() {
    for _ in 0..5 {
        test();
    }
    random_perft();
}
