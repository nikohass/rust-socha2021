use game_sdk::{ActionListStack, GameState};
use std::time::Instant;

fn perft(state: &mut GameState, depth: usize, als: &mut ActionListStack) -> u64 {
    if depth == 0 || state.is_game_over() {
        return 1;
    }
    als[depth].size = 0;
    state.get_possible_actions(&mut als[depth]);
    let mut nodes: u64 = 0;
    for i in 0..als[depth].size {
        state.do_action(als[depth][i]);
        nodes += perft(state, depth - 1, als);
        state.undo_action(als[depth][i]);
    }
    nodes
}

fn test() {
    let current_best: f64 = 28284586.;
    let depth = 3;
    let start_time = Instant::now();
    let mut als = ActionListStack::with_size(depth + 1);
    let mut nodes: u64 = 0;
    let fens = vec![
        "20 32768 15950743555472498867215306974539284496 1298074833604611993819774835491712 83076749736557242056487941267521536 17179881472 1993842300686507093905443867859091584 41538513517600800102841821851287552 0 0 0 62914569 170143901305290402726619173899970019335 0 0 155648 38547617899104724787858147799116677120 16874964943690196498745885797924848",
        "25 32768 15950743555472498867215306974539284496 1298074833604611993819774835491712 98653722016245638515427880384593920 17179881472 1993842300686507093905443867859099776 4029223768523553109953471813982879744 0 0 0 62914569 170143901305290402726619736850862964999 0 0 7516350464 38879924898050953756084099564186763264 16874964934018789905799917940785136",
        "34 32768 15950743555472498868368230128415146000 1298074833604648887439863649928064 98653722016245638515427880384593920 17179881500 1996438450353714547023103802317220992 4029223768523557832336843182230732800 0 0 4194307 170141548543861440284092145268166754313 170143901305290402726619736850862964999 0 0 7516350464 38879924907954478792735876438207372288 16874964934006982835521150047764464",
        "37 32768 15950743555472498868368230128415146000 1298074833604653499128081104241536 98653722016245638515427880384593920 17179881500 1996438450353714547023103802317220992 4029223768523557832336843182230732800 0 0 4194307 170141548543861440284092145268166754313 170143901305290402726619736850896519431 0 0 7516350464 38879924907954478792735876575646325760 16874964934006835261498191626911740",
        "42 32768 15950743555472498868368230128415146000 63804272296123972030387502895437710208 98653722016245638515427880384593920 17179881501 1997006357977359298705646859715619968 4029223768523557832913304209412063232 0 0 64563608656034136067 170141548543861440284092145268166754313 170143901305290402726619736850896519431 0 0 288230521107015680 38879924907954478792735876575646325760 16874964934006540111341195213420528",
        "48 32768 15950743555472498868368230128415146000 63804272296123972030387502895437710210 99140500310960793337620217502629888 17179881501 1997006357977359298705646859715620000 4047396810004309808183921496362582016 0 0 64563643840423002123 170141548544170925441487442926567948297 170143901305290402726619736850896519431 0 68719509504 5981528833247634214945543369103927296 38879924907954478792735876575646325760 16874964856484171928122090827290608",
        "71 32782 101022995911627452292808908876905185293 85071443591602383225867773295199256582 85073228444933807146678108749895303224 19156447921 170863156489054673537635072971599031168 7165371274101003365465150851884521472 1993841993677373809355710590420516864 0 649037416802010849497289609707536 18173051422958828895585881095669656 17442875740850357279125645880722305 0 0 36029028947288128 16137670946407236750324409113005404160 18624768831693063405141404754619927561",
        "68 32782 101022995911627452292808908876905185293 85071443591602383225867773295199256582 85073228444933802424311625880250089528 19156447921 170863156489054673537635072971599031168 7165371274101003365465150851884521472 1993841993677373809355710590420516864 0 649037416802010849497289609707536 18173051422958828895585881095669656 17442875740850357279125645880722305 0 0 36029028947288128 16137670946407236750324409113005404160 18624768831693063405141404754619927576",
        "62 32782 101022995911627452292808908876905185293 85071443591602383225867773295199256576 85073228444933802424311625880250089528 19156447921 170863156489054673537635072971599031168 7165371274101003365465150851884521472 1993841993677373809355710590420516864 0 649037416802010849497289609707536 18173051422958828895585881095669656 17442875740850357279125645880722305 0 0 36029028947288128 16137670946407236750324409113005404160 15966312840123231659333790634059238456",
        "60 32782 101022995911627452182128426842461831181 85071443591602383225867773295199256576 85073228444933802424311625880250089528 19155399344 721729639670197985902681888699493248 7165371274101003365465150851884521472 1993841993677373809355710590420516864 0 649037416802010849497289609707536 18173051422958828895585881095669656 17442875740850357279125645880722305 0 0 36029028947288128 16137670946407236750324409113005404160 15966312840123231659333790908937145528",
    ];

    for fen in fens.iter() {
        let mut state = GameState::from_fen((*fen).to_string());
        nodes += perft(&mut state, depth, &mut als);
    }

    let time_elapsed = start_time.elapsed().as_micros();
    let nps = (nodes * 1_000_000) as f64 / time_elapsed as f64;
    println!(
        "{:.2}%, Nodes: {}, Nodes/s: {}",
        nps / current_best * 100.,
        nodes,
        nps as u64
    );
}

fn count_actions(state: &mut GameState, depth: usize, als: &mut ActionListStack) -> u64 {
    als[depth].size = 0;
    state.get_possible_actions(&mut als[depth]);
    if depth == 0 || state.is_game_over() {
        return als[depth].size as u64;
    }
    let mut nodes: u64 = 0;
    for i in 0..als[depth].size {
        state.do_action(als[depth][i]);
        nodes += count_actions(state, depth - 1, als);
        state.undo_action(als[depth][i]);
    }
    nodes
}

fn main() {
    for _ in 0..5 {
        test();
    }
    let mut state = GameState::from_fen("10 229376 21270254224581560681009129656623824896 0 0 17179881472 1993842152134227742961992379458912256 0 0 0 0 0 162259412228914383610878529372163 0 0 0 2658457893046336551349755980500697088 230904757757165799616708592".to_string());
    let mut als = ActionListStack::with_size(4);

    let actions = count_actions(&mut state, 2, &mut als); // ensures that the move generation is not accidentally changed
    println!("{}", actions);
    assert!(actions == 46643240);
}
