//use player::neural_network::*;
//use player::simple_client::SimpleClient;
//use std::time::Instant;
//use player::float_stuff::*;

fn main() {
    //panic!("{}", sigmoid(f32::NAN));
    /*let mut s = GameState::new();
    s.board[0].flip_bit(0);
    s.current_color = s.current_color.next().next();
    println!("{:?}", state_to_vector(&s));*/
    //panic!();

    //let i = vec![vec![vec![1.; 4]; 20]; 20];

    //let nn = NeuralNetwork::new("weights");
    //println!("{}", nn);
    /*
    let state = GameState::from_fen("12 17179883520 830767576593772713779094370480293888 1163074654768126417319506364833202176 0 0 0 162259392886110493148848586752001 162259354200502712224788718288897 32768 37218388952594552466365425532509618179 255211775190703847597530955573826158592 0 0 0 34359762944 1993843261328578502152245988729290752 11682668212098555215701528314617840".to_string());
    println!("{}", state);
    let i = state_to_vector(&state);
    let out = nn.feed_forward(i);

    #[rustfmt::skip]
    let s: [f32; 400] = [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.94925715e-22,
       4.24997015e-09, 4.76296991e-05, 1.43415255e-05, 7.78881173e-08,
       3.35888760e-13, 2.92953097e-19, 3.53308138e-12, 2.81338841e-11,
       4.96669816e-10, 4.62005271e-13, 1.50993415e-14, 1.72022450e-28,
       2.26203276e-25, 1.27874072e-31, 8.06995770e-26, 3.76592339e-29,
       1.55534313e-30, 0.00000000e+00, 9.53472855e-36, 3.38191336e-10,
       1.49031875e-05, 3.18733532e-06, 1.43908385e-10, 1.16319006e-05,
       3.71726573e-11, 4.91887401e-13, 1.83498344e-06, 4.82713119e-07,
       3.36324615e-06, 2.79202030e-12, 3.44546329e-08, 4.07004569e-11,
       1.05484388e-18, 1.34037060e-22, 6.77189187e-23, 2.14710229e-28,
       4.05575075e-36, 2.27739001e-27, 1.05897733e-24, 5.87272552e-06,
       2.67890692e-02, 9.45194006e-01, 9.88692045e-04, 4.12065417e-11,
       1.70877840e-10, 2.13785071e-13, 4.37486020e-10, 4.69274278e-14,
       4.10417078e-09, 4.95414265e-10, 2.17166105e-10, 3.67785490e-12,
       6.63327240e-21, 1.72512980e-32, 9.83344401e-23, 4.56230078e-28,
       1.39607278e-24, 6.18742927e-18, 4.96573616e-12, 8.97648633e-02,
       1.06559157e-01, 9.99960959e-01, 9.99731064e-01, 4.97787332e-05,
       7.18028359e-10, 3.28150904e-18, 2.96818662e-16, 4.53172723e-14,
       1.44465616e-13, 1.60478477e-12, 1.14896417e-11, 1.13833023e-11,
       5.38292522e-10, 7.21365859e-20, 2.62976913e-30, 0.00000000e+00,
       7.69463618e-15, 1.16755114e-20, 2.22114249e-18, 2.71124678e-10,
       1.35597587e-03, 4.30874228e-01, 5.70029020e-04, 3.72819926e-08,
       8.00737379e-14, 1.35350191e-17, 6.92186868e-13, 2.10317137e-15,
       1.36284494e-22, 6.65860913e-18, 3.81799925e-13, 2.50953214e-17,
       1.03403686e-22, 1.68292526e-17, 1.57524699e-27, 4.05477595e-21,
       2.28045602e-22, 7.84468976e-16, 8.68930155e-18, 2.06096330e-18,
       3.78750400e-07, 1.25683357e-06, 2.99233283e-09, 1.05766910e-13,
       2.00920891e-14, 5.83116125e-11, 2.85411206e-20, 2.15104844e-18,
       1.83754794e-24, 3.57749304e-22, 1.14060542e-19, 1.44438325e-17,
       5.19487747e-18, 1.09847569e-19, 2.13383719e-25, 2.42382158e-30,
       1.11545354e-14, 4.36985815e-13, 2.68300498e-17, 2.85107224e-15,
       1.93736696e-14, 1.04679796e-12, 3.60509332e-17, 4.17500184e-16,
       2.65253767e-16, 6.08957465e-14, 3.69179513e-14, 1.77326642e-21,
       1.12534315e-22, 2.06906810e-19, 4.04576434e-23, 2.58588654e-17,
       8.36588435e-20, 1.21948594e-22, 1.14320981e-20, 3.46082400e-26,
       5.39871272e-16, 1.79977788e-12, 2.06233385e-16, 1.49444395e-19,
       3.33514208e-19, 1.64549277e-10, 1.28091848e-08, 9.74100661e-11,
       4.86860220e-20, 1.47774559e-16, 1.28380536e-22, 1.80826225e-28,
       1.60342882e-24, 1.25265211e-20, 2.76423456e-26, 3.81489721e-21,
       3.01836859e-24, 6.12302187e-26, 2.89769551e-29, 1.00594822e-25,
       1.42372522e-27, 4.00694748e-25, 2.88512737e-25, 6.10353200e-24,
       6.37742520e-22, 4.32992189e-15, 4.23057769e-12, 3.33783286e-16,
       3.40350555e-26, 9.63732277e-24, 4.11004975e-26, 6.83910964e-29,
       8.22296012e-29, 3.27744392e-25, 1.18296010e-27, 5.14382788e-24,
       3.40075767e-24, 6.93727784e-21, 2.02730801e-19, 2.69913087e-18,
       6.55031584e-29, 1.52873872e-21, 1.20537441e-23, 3.57455019e-20,
       1.72233827e-21, 5.33796813e-18, 1.05709861e-20, 2.59081515e-12,
       8.08079927e-19, 2.07702952e-21, 2.05075038e-20, 2.48012038e-28,
       1.52183805e-21, 1.93958203e-21, 5.27495684e-32, 4.69132267e-24,
       7.37136461e-18, 1.91750593e-27, 4.56236474e-23, 1.53617823e-24,
       1.86453852e-28, 1.33536667e-18, 1.73063054e-28, 6.12882781e-30,
       1.95543578e-21, 3.17900554e-19, 2.30237431e-18, 1.88500186e-14,
       2.61482164e-17, 5.55345960e-21, 8.06476675e-31, 3.93526036e-28,
       1.38501828e-24, 1.04998806e-22, 3.14478907e-25, 6.03410395e-24,
       3.18266667e-21, 1.28060098e-23, 2.12153155e-26, 1.25471303e-28,
       3.54355289e-21, 8.65944325e-28, 2.06101423e-22, 5.92997874e-32,
       7.80527238e-20, 5.30324384e-17, 4.52917358e-16, 2.32207847e-11,
       1.50476458e-18, 6.07459955e-21, 8.05142442e-24, 9.99085142e-23,
       2.55728529e-29, 5.63609994e-27, 2.04428791e-23, 1.12959939e-25,
       1.10367281e-24, 7.57343904e-29, 9.39209303e-30, 2.21159768e-25,
       2.04121179e-36, 1.14492086e-27, 3.59744199e-24, 5.29217341e-23,
       7.55265686e-24, 5.29664366e-13, 3.32180366e-06, 8.41259956e-04,
       7.36852002e-08, 4.06330683e-14, 6.44598506e-21, 8.69101502e-28,
       2.73820843e-25, 1.83975212e-22, 7.23841433e-27, 2.29439044e-30,
       8.62269420e-27, 6.14556393e-31, 3.68069864e-26, 7.26124880e-22,
       5.54884761e-27, 1.01928658e-32, 1.16977657e-26, 9.83653774e-27,
       1.22174914e-14, 3.33450020e-15, 1.80408115e-08, 3.66847873e-01,
       6.39272679e-09, 1.51719559e-09, 1.47421045e-15, 9.83872195e-18,
       3.88465261e-21, 1.93861759e-24, 3.74908882e-25, 7.04700049e-23,
       2.07284534e-18, 3.59867213e-27, 3.87443701e-23, 2.09405400e-29,
       1.60135009e-32, 5.02377434e-30, 2.95551866e-25, 6.34846925e-14,
       5.47611515e-18, 3.01768159e-14, 1.45940239e-11, 2.34407187e-03,
       6.73803444e-15, 1.55747621e-13, 1.37816665e-13, 4.20776801e-21,
       1.25242331e-19, 6.56150835e-25, 1.12341188e-24, 5.36117267e-25,
       1.91937164e-20, 2.57549404e-22, 1.75284802e-21, 2.11063192e-28,
       1.25980131e-36, 5.43811973e-27, 1.36442565e-23, 1.39523446e-20,
       2.23943375e-26, 4.51170351e-13, 4.69099949e-17, 2.41288160e-14,
       1.18804744e-20, 1.96667845e-22, 3.35090800e-17, 8.13071993e-23,
       3.95754871e-24, 4.27628038e-29, 1.57181470e-18, 7.01918108e-30,
       5.52556183e-15, 1.17349094e-18, 9.92141183e-33, 0.00000000e+00,
       0.00000000e+00, 9.68738660e-22, 6.74365063e-27, 4.80169965e-22,
       1.96773966e-34, 8.10908533e-34, 5.93628435e-35, 6.93238580e-28,
       2.67041364e-18, 3.01646159e-29, 1.19176200e-25, 3.85928196e-26,
       3.56677170e-28, 1.07405877e-24, 6.24705774e-24, 3.59270609e-34,
       5.21566212e-35, 8.87414114e-34, 1.74441740e-35, 0.00000000e+00,
       9.48747734e-16, 1.36188422e-21, 1.36431701e-22, 6.95968466e-26,
       9.23769853e-31, 2.66716477e-34, 0.00000000e+00, 1.10854346e-29,
       7.48589326e-21, 4.78513818e-35, 2.24438879e-23, 2.99377606e-21,
       2.95839573e-32, 1.32353679e-23, 5.41688301e-25, 6.76364067e-35,
       3.28057945e-35, 1.02682414e-29, 9.62782702e-27, 1.31605665e-36,
       1.90000629e-15, 7.73556079e-26, 1.73844979e-15, 0.00000000e+00,
       2.55506804e-32, 6.10513891e-24, 1.16963624e-22, 1.63153784e-26,
       4.23563308e-34, 0.00000000e+00, 3.64332501e-29, 1.28580438e-23,
       4.24681188e-27, 1.74227023e-19, 2.20029127e-37, 1.50843894e-38,
       0.00000000e+00, 1.68854429e-26, 2.06792184e-21, 5.75074901e-27,
       5.37583965e-16, 1.65330458e-17, 4.65659864e-28, 7.25298940e-32,
       1.15322209e-36, 9.69786033e-20, 1.94914775e-16, 5.57958973e-32,
       1.43892949e-37, 1.83201900e-31, 5.18365348e-33, 1.31656377e-21,
       3.32541514e-24, 3.37235134e-23, 1.91720758e-18, 0.00000000e+00,
       0.00000000e+00, 5.31700075e-31, 1.62650398e-19, 1.49542790e-30];

    let mut err = Bitboard::empty();
    for i in 0..400 {
        if (out[i] - s[i]).abs() > 0.001 {
            println!("{} {}", s[i], out[i]);
            let x = i % 20;
            let y = (i - x) / 20;
            let t = x + y * 21;
            err.flip_bit(t as u16);
        }
    }*/
    /*
    let mut nn = NeuralNetwork::with_weights("weights");
    let mut simple_client = SimpleClient::default();
    let mut state = GameState::new();
    while !state.is_game_over() {
        let start_time = Instant::now();
        let action = if state.ply & 0b1 == 0 {
            nn.on_move_request(&state)
        } else {
            simple_client.on_move_request(&state)
        };
        println!("{}", start_time.elapsed().as_millis());
        state.do_action(action);
        println!("{}", state);
    }*/
}
